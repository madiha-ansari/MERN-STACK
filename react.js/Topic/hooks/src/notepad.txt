use reducer
import React, { useReducer } from "react";

const reducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return { count: state.count + 1 };
    case "decrement":
      return { count: state.count - 1 };
    default:
      return state;
  }
};

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <div>
      <h2>Count: {state.count}</h2>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </div>
  );
};

export default Counter;

usecallback
import React, { useState, useCallback } from "react";

const Button = ({ handleClick }) => {
  console.log("Button Rendered");
  return <button onClick={handleClick}>Click Me</button>;
};

const App = () => {
  const [count, setCount] = useState(0);

  const memoizedClick = useCallback(() => {
    setCount((prev) => prev + 1);
  }, []);

  return (
    <div>
      <h2>Count: {count}</h2>
      <Button handleClick={memoizedClick} />
    </div>
  );
};

export default App;

import React, { useState, useCallback } from "react";

const Button = ({ handleClick }) => {
  console.log("Button Rendered");
  return <button onClick={handleClick}>Click Me</button>;
};

const App = () => {
  const [count, setCount] = useState(0);

  const memoizedClick = useCallback(() => {
    setCount((prev) => prev + 1);
  }, []);

  return (
    <div>
      <h2>Count: {count}</h2>
      <Button handleClick={memoizedClick} />
    </div>
  );
};

export default App;

useref
import React, { useRef } from "react";

const InputFocus = () => {
  const inputRef = useRef(null);

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={() => inputRef.current.focus()}>Focus</button>
    </div>
  );
};

export default InputFocus;

usecontext
import React, { createContext, useContext } from "react";

const UserContext = createContext();

const UserInfo = () => {
  const user = useContext(UserContext);
  return <h2>User: {user}</h2>;
};

const App = () => {
  return (
    <UserContext.Provider value="Ali Huzaifa">
      <UserInfo />
    </UserContext.Provider>
  );
};

export default App;
import React, { useReducer } from "react";

const reducer = (state, action) => {
  switch (action.type) {
    case "increment":
      return { count: state.count + 1 };
    case "decrement":
      return { count: state.count - 1 };
    default:
      return state;
  }
};

const Counter = () => {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <div>
      <h2>Count: {state.count}</h2>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </div>
  );
};

export default Counter;

import React, { useState } from "react";

const Counter = () => {
  const [count, setCount] = useState(0);

  return (
    <div>
      <h2>Counter: {count}</h2>
      <button onClick={() => setCount(count + 1)}>Increase</button>
    </div>
  );
};

export default Counter;

import React, { useState, useEffect } from "react";

const Timer = () => {
  const [time, setTime] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => setTime((prev) => prev + 1), 1000);
    return () => clearInterval(interval); // Cleanup effect
  }, []);

  return <h2>Timer: {time}s</h2>;
};

export default Timer;



import React, { createContext, useContext } from "react";

const UserContext = createContext();

const UserInfo = () => {
  const user = useContext(UserContext);
  return <h2>User: {user}</h2>;
};

const App = () => {
  return (
    <UserContext.Provider value="Ali Huzaifa">
      <UserInfo />
    </UserContext.Provider>
  );
};

export default App;

import React, { useRef } from "react";

const InputFocus = () => {
  const inputRef = useRef(null);

  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={() => inputRef.current.focus()}>Focus</button>
    </div>
  );
};

export default InputFocus;

import React, { useState, useCallback } from "react";

const Button = ({ handleClick }) => {
  console.log("Button Rendered");
  return <button onClick={handleClick}>Click Me</button>;
};

const App = () => {
  const [count, setCount] = useState(0);

  const memoizedClick = useCallback(() => {
    setCount((prev) => prev + 1);
  }, []);

  return (
    <div>
      <h2>Count: {count}</h2>
      <Button handleClick={memoizedClick} />
    </div>
  );
};

export default App;
